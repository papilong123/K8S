# Mysql参数优化对于新手来讲，是比较难懂的东西，其实这个参数优化，是个很复杂的东西，
# 对于不同的网站，及其在线量，访问量，帖子数量，网络情况，以及机器硬件配置都有关系，
# 优化不可能一次性完成，需要不断的观察以及调试，才有可能得到最佳效果。
# 注意：- 和 _ 是一样的，假如包含的没有找到，可以换成_

[mysql]

[mysqld]

# 配置 MySQL replcation 需要定义，不要和 canal 的 slaveId 重复。
# 表示是本机的序号为1,一般来讲就是master的意思
# 给服务器分配一个独一无二的ID编号; 
# n的取值范围是1~2的32次方启用二进制日志功能。
server_id=1

bind-address = 0.0.0.0

# DEMAND关闭查询缓存，默认OFF开启的
query_cache_type = DEMAND

# 开启 binlog
log-bin=mysql-bin

# 同步binlog
syn_binlog=1

# STATEMENT,ROW,MIXED
# 基于SQL语句的复制(statement-based replication, SBR)，
# 基于行的复制(row-based replication, RBR)，
# 混合模式复制(mixed-based replication, MBR)。
# 相应地，binlog的格式也有三种：STATEMENT，ROW，MIXED。
binlog-format=MIXED

# 服务端使⽤的字符集默认为8⽐特编码的latin1字符集
# 新数据库或数据表的默认字符集。为了与MySQL的早期版本保持兼容，
# 这个字符集也可以用–default-character-set选项给出;但这个选项已经显得有点过时了
character-set-server=utf8


# 系统默认时区是system
default-time-zone='+8:00'
innodb_rollback_on_timeout='ON'

# 允许最⼤连接数 
max_connections=1000
innodb_lock_wait_timeout=500

# 创建新表时将使⽤的默认存储引擎 
default-storage-engine=INNODB


########################################################
############各种缓冲区及处理数据的最大值设置############
########################################################

# MySQL执行排序使用的缓冲大小。如果想要增加ORDER BY的速度，首先看是否可以让MySQL使用索引而不是额外的排序阶段
# 如果不能，可以尝试增加sort_buffer_size变量的大小，默认262144
sort_buffer_size = 262144

# 应用程序经常会出现一些两表（或多表）Join的操作需求，MySQL在完成某些 Join 需求的时候（all/index join），
# 为了减少参与Join的“被驱动表”的读取次数以提高性能，需要使用到 Join Buffer 来协助完成 Join操作。
# 当 Join Buffer 太小，MySQL 不会将该 Buffer 存入磁盘文件，而是先将Join Buffer中的结果集与需要 Join 的表进行 Join 操作
# 然后清空 Join Buffer 中的数据，继续将剩余的结果集写入此 Buffer 中，
# 如此往复。这势必会造成被驱动表需要被多次读取，成倍增加 IO 访问，降低效率。
# 若果多表连接需求大，则这个值要设置大一点。默认262144
join_buffer_size = 262144

#索引块的缓冲区大默认8388608
key_buffer_size = 8388608


# 消息缓冲区会用到该列，该值太小则会在处理大包时产生错误。如果使用大的text,BLOB列，必须增加该值
# 默认4194304，也就是4M
max_allowed_packet = 4194304

# mysql服务器最大连接数值的设置范围比较理想的是：服务器响应的最大连接数值占服务器上限连接数值的比例值在10%以上
# Max_used_connections / max_connections * 100% ，默认151
max_connections = 10000
# 阻止过多尝试失败的客户端，如果值为10时，失败（如密码错误）10次，mysql会无条件阻止用户连接，默认100
max_connect_errors = 100

########################################################
############innodb 相关选项############
########################################################

table_definition_cache=150

table_open_cache=128

innodb_buffer_pool_size=20M

# innodb使用后台线程处理数据页上的读写 I/O(输入输出)请求,根据你的 CPU 核数来更改,默认是4
# 注:这两个参数不支持动态改变,需要把该参数加入到my.cnf里，修改完后重启MySQL服务,允许值的范围从 1-64
innodb_read_io_threads=4
innodb_write_io_threads=4

# 回收回滚日志undolog
# InnoDB中的清除操作是一类定期回收无用数据的操作。
# 在之前的几个版本中，清除操作是主线程的一部分，
# 这意味着运行时它可能会堵塞其它的数据库操作。
# 从MySQL5.5.X版本开始，该操作运行于独立的线程中,并支持更多的并发数。
# 用户可通过设置innodb_purge_threads配置参数来选择清除操作是否使用单独线程,
# 默认情况下参数设置为4(使用4个单独线程)
innodb_purge_threads = 4

# 解释1:
# 0：如果innodb_flush_log_at_trx_commit的值为0,log buffer每秒就会被刷写日志文件到磁盘，
# 	提交事务的时候不做任何操作（执行是由mysql的master thread线程来执行的。
# 	主线程中每秒会将重做日志缓冲写入磁盘的重做日志文件(REDO LOG)中。
# 	不论事务是否已经提交）默认的日志文件是ib_logfile0,ib_logfile1
# 1：当设为默认值1的时候，每次提交事务的时候，都会将log buffer刷写到日志。
# 2：如果设为2,每次提交事务都会写日志，但并不会执行刷的操作。
# 	每秒定时会刷到日志文件。要注意的是，并不能保证100%每秒一定都会刷到磁盘，
# 	这要取决于进程的调度。每次事务提交的时候将数据写入事务日志，
# 	而这里的写入仅是调用了文件系统的写入操作，而文件系统是有 缓存的，
# 	所以这个写入并不能保证数据已经写入到物理磁盘默认值1是为了保证完整的ACID。
#	当然，你可以将这个配置项设为1以外的值来换取更高的性能，
#	但是在系统崩溃的时候，你将会丢失1秒的数据。
#	设为0的话，mysqld进程崩溃的时候，就会丢失最后1秒的事务。
#	设为2,只有在操作系统崩溃或者断电的时候才会丢失最后1秒的数据。
#   InnoDB在做恢复的时候会忽略这个值。
# 总结
# 	设为1当然是最安全的，但性能页是最差的（相对其他两个参数而言，但不是不能接受）。
#	如果对数据一致性和完整性要求不高，完全可以设为2，
#	如果只最求性能，例如高并发写的日志服务器，设为0来获得更高性能
# 解释2:
# 这个选项决定着什么时候把日志信息写入日志文件,
# 以及什么时候把这些文件物理地写(术语称为”同步”)到硬盘上。
# 设置值0的意思是每隔一秒写一次日志并进行 同步，这可以减少硬盘写操作次数，
# 		但可能造成数据丢失; 
# 设置值1(设置设置)的意思是在每执行完一条COMMIT命令就写一次日志并进行同步，
# 这可以防止数据丢失，但硬盘写操作可能会很频繁;
# 设置值2是一般折衷的办法，即每执行完一条COMMIT命令写一次日志，每隔一秒进行一次同步。
innodb_flush_log_at_trx_commit = 1

# 日志组中的redolog文件总数.通常来说 2~3 是比较好的.默认2
innodb_log_files_in_group = 2
# 日志组中每个redolog文件的大小，默认50331648，也就是48MB
innodb_log_file_size=50331648

#innodb_max_dirty_pages_pct作用：控制Innodb的脏页在缓冲中在那个百分比之下，值在范围1-100,默认为75.这个参数的另一个用处：
#当Innodb的内存分配过大，致使swap占用严重时，可以适当的减小调整这个值，使达到swap空间释放出来。建义：这个值最大在90%，最小在15%。
#太大，缓存中每次更新需要致换数据页太多，太小，放的数据页太小，更新操作太慢。
innodb_max_dirty_pages_pct = 75


# InnoDB为独立表空间模式，每个数据库的每个表都会生成一个数据空间
# 0表示关闭独立的表空间，1表示开启独立的表空间，默认为1
# 独立表空间优点：
# 1．每个表都有自已独立的表空间。
# 2．每个表的数据和索引都会存在自已的表空间中。
# 3．可以实现单表在不同的数据库中移动。
# 4．空间可以回收（除drop table操作处，表空不能自已回收）
# 缺点：
# 单表增加过大，如超过100G
# 结论：
# 共享表空间在Insert操作上少有优势。其它都没独立表空间表现好。当启用独立表空间时，
# 请合理调整：innodb_open_files
innodb_file_per_table = 1

# 服务器关闭交互式连接前等待活动的秒数。
# 交互式客户端定义为在mysql_real_connect()中使用CLIENT_INTERACTIVE选项的客户端。
# 默认值：28800秒（8小时）
interactive_timeout = 28800

# 服务器关闭非交互连接之前等待活动的秒数。
# 在线程启动时，根据全局wait_timeout值或全局interactive_timeout值初始化会话wait_timeout值，
# 取决于客户端类型(由mysql_real_connect()的连接选项CLIENT_INTERACTIVE定义)。
# 参数默认值：28800秒（8小时）
# MySQL服务器所支持的最大连接数是有上限的，因为每个连接的建立都会消耗内存，
# 因此我们希望客户端在连接到MySQL Server处理完相应的操作后，
# 应该断开连接并释放占用的内存。如果你的MySQL Server有大量的闲置连接，
# 他们不仅会白白消耗内存，而且如果连接一直在累加而不断开，
# 最终肯定会达到MySQL Server的连接上限数，这会报'too many connections'的错误。
# 对于wait_timeout的值设定，应该根据系统的运行情况来判断。
# 在系统运行一段时间后，可以通过show processlist命令查看当前系统的连接状态，
# 如果发现有大量的sleep状态的连接进程，则说明该参数设置的过大，
# 可以进行适当的调整小些。要同时设置interactive_timeout和wait_timeout才会生效。
wait_timeout = 86400

# 缓冲池实例个数，默认为1。
innodb_buffer_pool_instances = 1

# 数据库刚启动时，LRU列表是空的，即没有任何的页。这时页都存放在Free列表中。当需要从缓冲池中分页时,首先从Free列
# 表中查找是否有可用的空闲页,若有则将该页从Free列表中删除,放入到LRU列表中。
# 否则,根据LRU算法,淘汰LRU列表末尾的页,将该内存空间分配给新的页。当页从
# LRU列表的od部分加入到nw部分时,称此时发生的操作为 page made young,而因
# 为 innodb old blocks time的设置而导致页没有从old部分移动到new部分的操作称为
# page not made young。可以通过命令 SHOW ENGINE INNODB STATUS来观察LRU列表及Free列表的使用情况和运行状态
# old列表所占比例,midpoint insertion strategy算法
innodb_old_blocks_pct = 37
# 页读取到mid位置后需要等待多久才会被加入到LRU列表的热端，默认1000
innodb_old_blocks_time = 1000

# change buffer占buffer pool比例，达到后会自动刷回磁盘，默认25
innodb_change_buffer_max_size = 25

# 默认为1，值为 1 的时候会有上述的“连坐”机制，值为 0 时表示不找邻居，自己刷自己的。
# 找“邻居”这个优化在机械硬盘时代是很有意义的，可以减少很多随机 IO。
# 机械硬盘的随机 IOPS 一般只有几百，相同的逻辑操作减少随机 IO 就意味着系统性能的大幅度提升。
# 而如果使用的是 SSD 这类 IOPS 比较高的设备的话，我就建议你把 innodb_flush_neighbors 的值设置成 0。
# 因为这时候 IOPS 往往不是瓶颈，而“只刷自己”，就能更快地执行完必要的刷脏页操作，减少 SQL 语句响应时间。
# 在 MySQL 8.0 中，innodb_flush_neighbors 参数的默认值已经是 0 了。
innodb_flush_neighbors = 1




# 分布式事务
#innodb_support_xa = FALSE
 
#innodb_buffer_pool_size 一致 可以开启多个内存缓冲池，把需要缓冲的数据hash到不同的缓冲池中，这样可以并行的内存读写。
#innodb_buffer_pool_instances = 4
#这个参数据控制Innodb checkpoint时的IO能力
#innodb_io_capacity = 500
#作用：使每个Innodb的表，有自已独立的表空间。如删除文件后可以回收那部分空间。
#分配原则：只有使用不使用。但ＤＢ还需要有一个公共的表空间。
#innodb_file_per_table = 1
 
#当更新/插入的非聚集索引的数据所对应的页不在内存中时（对非聚集索引的更新操作通常会带来随机IO），会将其放到一个insert buffer中，
#当随后页面被读到内存中时，会将这些变化的记录merge到页中。当服务器比较空闲时，后台线程也会做merge操作
#innodb_change_buffering = inserts
#该值影响每秒刷新脏页的操作，开启此配置后，刷新脏页会通过判断产生重做日志的速度来判断最合适的刷新脏页的数量；
#innodb_adaptive_flushing = 1
 
#数据库事务隔离级别 ，读取提交内容
#transaction-isolation = READ-COMMITTED
 
#innodb_flush_method这个参数控制着innodb数据文件及redo log的打开、刷写模式
#InnoDB使用O_DIRECT模式打开数据文件，用fsync()函数去更新日志和数据文件。
#innodb_flush_method = O_DIRECT
#默认设置值为1.设置为0：表示Innodb使用自带的内存分配程序；设置为1：表示InnoDB使用操作系统的内存分配程序　　　　　
#innodb_use_sys_malloc = 1
